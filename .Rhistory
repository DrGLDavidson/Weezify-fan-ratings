labs(
title = "Weezify Fan Rating Across Bundles",
x = "Bundle",
y = "Fan Rating Count",
color = "Fan rating count"
) +
scale_color_gradient(low = "#EDB58F", high = "#02307C")
#  ) +
#  ylim(0,90)+
# guides(colour = guide_legend(override.aes = list(size = 16))) +
# scale_color_manual(values = c(
#   "#C06E22", "#EFDD9F", "purple", "#577E43",
#   "#00ABE6", "#BECE30", "black", "darkgrey",
#   "#ED1B33", "lightgrey", "darkblue"
# ))
dev.off()
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatingwithCountBoxplots.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df2b, aes(x = bundle, y = fanRating, color = fanRatingCount)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) +
geom_pointrange(data = meansFR, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
# legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Rating Across Bundles",
x = "Bundle",
y = "Fan Rating Count",
color = "Fan rating count"
) +
scale_color_gradient(low = "#EDB58F", high = "#02307C")
#  ) +
#  ylim(0,90)+
# guides(colour = guide_legend(override.aes = list(size = 16))) +
# scale_color_manual(values = c(
#   "#C06E22", "#EFDD9F", "purple", "#577E43",
#   "#00ABE6", "#BECE30", "black", "darkgrey",
#   "#ED1B33", "lightgrey", "darkblue"
# ))
dev.off()
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatingwithCountBoxplots.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df2b, aes(x = bundle, y = fanRating, color = fanRatingCount)) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_pointrange(data = meansFR, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
# legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Rating Across Bundles",
x = "Bundle",
y = "Fan Rating Count",
color = "Fan rating count"
) +
scale_color_gradient(low = "#EDB58F", high = "#02307C")
#  ) +
#  ylim(0,90)+
# guides(colour = guide_legend(override.aes = list(size = 16))) +
# scale_color_manual(values = c(
#   "#C06E22", "#EFDD9F", "purple", "#577E43",
#   "#00ABE6", "#BECE30", "black", "darkgrey",
#   "#ED1B33", "lightgrey", "darkblue"
# ))
dev.off()
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatingwithCountBoxplots.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df2b, aes(x = bundle, y = fanRating, color = fanRatingCount)) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_pointrange(data = meansFR, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
# legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Rating Across Bundles",
x = "Bundle",
y = "Fan Rating Count",
color = "Fan rating count"
) +
scale_color_gradient(low = "#EDB58F", high = "#02307C")
dev.off()
library(janitor)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plyr)
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatings.csv", header =TRUE) #dataframe with song names, bundles and rankings.
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
# check data
names(df1)
hist(fanRatingCount)
hist(df1$fanRatingCount)
hist(df1$fanRatingCount, breaks=20)
hist(df1$fanRatingCount, breaks=100)
hist(df1$fanRatingCount, breaks=100,  xlim=c(0,80), ylim=c(0,1200))
hist(df1$fanRatingCount, breaks=100,  xlim=c(0,80), ylim=c(0,3000))
hist(df1$fanRatingCount, breaks=100,  xlim=c(0,80), ylim=c(0,1700))
hist(df1$fanRatingCount, breaks=200,  xlim=c(0,80), ylim=c(0,1700))
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=400,  xlim=c(0,80), ylim=c(0,1700))
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=200,  xlim=c(0,80), ylim=c(0,1700))
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=200,  xlim=c(0,80), ylim=c(0,1700))
rm(df1)
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
# check data
names(df1)
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=200,  xlim=c(0,80), ylim=c(0,1700))
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=200,  xlim=c(0,80), ylim=c(0,1000))
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=400,  xlim=c(0,80), ylim=c(0,1000))
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=400,  xlim=c(0,80), ylim=c(0,400))
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
# check data
names(df1)
head(df1)
unique(df1$bundle)
# histogram to visualise frequency of fan rating counts
hist(df1$fanRatingCount, breaks=400,  xlim=c(0,80), ylim=c(0,400))
df1$bundle <- chartr(" ", "_", df1$bundle)
df1<-df1 %>%
mutate(bundle = str_replace(bundle, "&", "and"))
library(janitor)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plyr)
df1$bundle <- chartr(" ", "_", df1$bundle)
df1<-df1 %>%
mutate(bundle = str_replace(bundle, "&", "and"))
unique(df1$bundle)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
names(df1)
unique(df1$type)
unique(df1$Type)
df1$Type<-make_clean_names(df1$Type)
unique(df1$Type)
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
df1$bundle <- chartr(" ", "_", df1$bundle)
df1<-df1 %>%
mutate(bundle = str_replace(bundle, "&", "and"))
unique(df1$bundle)
df1$Type<-make_clean_names(df1$Type, allow_dupes = TRUE)
unique(df1$Type)
uniqueType<-unique(df1$Type)
uniqueType<-as.data.frame((uniqueType))
path_out = 'F:/RWorkspace/GitHub/Weezify-fan-ratings/output'
write.csv(means, file.path(path_out,'uniqueType.csv'))
write.csv(uniqueType, file.path(path_out,'uniqueType.csv'))
df1b<-df1%>%
filter(Type=="full" | Type=="full_song" | Type=="full_song_acoustic" | Type=="acoustic_full_song" | Type=="acoustic_demo")
hist(df1b$fanRatingCount, breaks=400,  xlim=c(0,80), ylim=c(0,400))
hist(df1b$fanRatingCount, breaks=400,  xlim=c(0,60), ylim=c(0,100))
View(df1b)
names(df1b)
df1c<-dfb%>%
filter(fanRatingCount < 4)
df1c<-df1b%>%
filter(fanRatingCount < 4)
View(df1b)
View(df1c)
# filter out fan rating count >3
df1c<-df1b%>%
filter(fanRatingCount > 3)
# means and error
means <- summarySE(df1c, measurevar="fanRating", groupvars="bundle") #change to appropriate dataframe
means
colnames(means)[colnames(means) == "fanRating"] <- "averageFanRating"
colnames(means)[colnames(means) == "N"] <- "numberOfSongs"
colnames(means)[colnames(means) == "sd"] <- "standardDeviation"
colnames(means)[colnames(means) == "se"] <- "standardError"
colnames(means)[colnames(means) == "ci"] <- "confidenceInterval"
write.csv(means, file.path(path_out,'weezifyFanRatingsSummary_filtered.csv'))
ggplot(df1, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F", "purple", "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/weezifyRatingBoxplots_filtered.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df1, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F", "purple", "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
dev.off()
View(means)
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/weezifyRatingBoxplots_filtered.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df1c, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles (filtered)",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F", "purple", "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
dev.off()
View(uniqueType)
df1d<-df1%>%
filter(fanRatingCount > 5)
# means and error
means <- summarySE(df1d, measurevar="fanRating", groupvars="bundle") #change to appropriate dataframe
means
colnames(means)[colnames(means) == "fanRating"] <- "averageFanRating"
colnames(means)[colnames(means) == "N"] <- "numberOfSongs"
colnames(means)[colnames(means) == "sd"] <- "standardDeviation"
colnames(means)[colnames(means) == "se"] <- "standardError"
colnames(means)[colnames(means) == "ci"] <- "confidenceInterval"
write.csv(means, file.path(path_out,'weezifyFanRatingsSummary_filteredByCount.csv'))
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/weezifyRatingBoxplots_filteredByCount.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df1d, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles (filtered by rating count >5)",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F", "purple", "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
dev.off()
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/weezifyRatingBoxplots_filtered.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df1c, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles (filtered by type=full)",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F", "purple", "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
dev.off()
means <- summarySE(df1c, measurevar="fanRating", groupvars="bundle") #change to appropriate dataframe
means
colnames(means)[colnames(means) == "fanRating"] <- "averageFanRating"
colnames(means)[colnames(means) == "N"] <- "numberOfSongs"
colnames(means)[colnames(means) == "sd"] <- "standardDeviation"
colnames(means)[colnames(means) == "se"] <- "standardError"
colnames(means)[colnames(means) == "ci"] <- "confidenceInterval"
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/weezifyRatingBoxplots_filtered.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df1c, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles (filtered by type=full)",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F", "purple", "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
dev.off()
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/weezifyRatingBoxplots_filtered.tiff", width = 12, height = 9, units = 'in', res = 300)
ggplot(df1c, aes(x = bundle, y = fanRating, color = bundle)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.7, size = 1) +
geom_boxplot(alpha = 0.8, outlier.shape = NA) + #outlier.shape = NA otherwise outliers are duplicated data points on plot
geom_pointrange(data = means, aes(y = averageFanRating, ymin = averageFanRating - standardError, ymax = averageFanRating + standardError),
colour = "black", alpha = 1, size = 0.6) +
theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", linewidth = 0.8),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20), # Adjust title size here
axis.text.x = element_text(angle = 45, hjust = 0.95, vjust = 1.0),
axis.text = element_text(size = 10),
axis.title = element_text(size = 24),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)
) +
labs(
title = "Weezify Fan Ratings Across Bundles (filtered by type=full)",
x = "Bundle",
y = "Fan Rating"
) +
guides(colour = guide_legend(override.aes = list(size = 16))) +
scale_color_manual(values = c(
"#C06E22", "#EFDD9F",  "#577E43",
"#00ABE6", "#BECE30", "black", "darkgrey",
"#ED1B33", "lightgrey", "darkblue"
))
dev.off()
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/weezifyRatings.csv", header =TRUE) #dataframe with song names, bundles and rankings.
df1_16<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
df1<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/weezifyRatings.csv", header =TRUE) #dataframe with song names, bundles and rankings.
df1_16<-read.csv("F:/RWorkspace/GitHub/Weezify-fan-ratings/data/weezifyRatings_2025-01-16.csv", header =TRUE) #dataframe with lots more headers
names(df1)
df1_16$title<-make_clean_names(df1_16$title)
View(df1_16)
df1$title<-make_clean_names(df1$title)
dfx<- merge(df1, df1_16 , by = "title", all.x = TRUE)
View(dfx)
View(dfx)
missing_demos<- dfx %>%
filter(is.na(bundle.y))
View(missing_demos)
path_out = 'F:/RWorkspace/GitHub/Weezify-fan-ratings/output'
View(missing_demos)
View(missing_demos)
missing_demos<- dfx %>%
filter(is.na(bundle.y)) %>%
select(title, bundle.x, fanRating.x)
hist(missing_demos$fanRating.x)
histMissing<-hist(missing_demos$fanRating.x)
tiff(file="F:/RWorkspace/GitHub/Weezify-fan-ratings/output/missingDemosHistogram.tiff", width = 6, height = 6, units = 'in', res = 300)
histMissing<-hist(missing_demos$fanRating.x)
dev.off()
write.csv(missing_demos, file.path(path_out,'missingDemosPublicSpreadsheet.csv'))
write.csv(missing_demos, file.path(path_out,'missingDemosPublicSpreadsheet.csv', row.names = FALSE))
write.csv(missing_demos, file.path(path_out,'missingDemosPublicSpreadsheet.csv'), row.names = FALSE)
